var N = null;var searchIndex = {};
searchIndex["vst"]={"doc":"rust-vst is a rust implementation of the VST2.4 API","items":[[0,"buffer","vst","Buffers to safely work with audio samples.",N,N],[3,"AudioBuffer","vst::buffer","`AudioBuffer` contains references to the audio buffers for all input and output channels.",N,N],[3,"Inputs","","Wrapper type to access the buffers for the input channels of an `AudioBuffer` in a safe way. Behaves like a slice.",N,N],[3,"InputIterator","","Iterator over buffers for input channels of an `AudioBuffer`.",N,N],[3,"Outputs","","Wrapper type to access the buffers for the output channels of an `AudioBuffer` in a safe way. Behaves like a slice.",N,N],[3,"OutputIterator","","Iterator over buffers for output channels of an `AudioBuffer`.",N,N],[3,"SendEventBuffer","","This buffer is used for sending midi events through the VST interface. The purpose of this is to convert outgoing midi events from `event::Event` to `api::Events`. It only allocates memory in new() and reuses the memory between calls.",N,N],[6,"PlaceholderEvent","","This is used as a placeholder to pre-allocate space for a fixed number of midi events in the re-useable `SendEventBuffer`, because `SysExEvent` is larger than `MidiEvent`, so either one can be stored in a `SysExEvent`.",N,N],[8,"WriteIntoPlaceholder","","This trait is used by `SendEventBuffer::send_events` to accept iterators over midi events",N,N],[10,"write_into","","writes an event into the given placeholder memory location",0,[[["self"],["placeholderevent"]]]],[11,"from_raw","","Create an `AudioBuffer` from raw pointers. Only really useful for interacting with the VST API.",1,N],[11,"input_count","","The number of input channels that this buffer was created for",1,[[["self"]],["usize"]]],[11,"output_count","","The number of output channels that this buffer was created for",1,[[["self"]],["usize"]]],[11,"samples","","The number of samples in this buffer (same for all channels)",1,[[["self"]],["usize"]]],[11,"split","","Split this buffer into separate inputs and outputs.",1,N],[11,"zip","","Zip together buffers.",1,[[["self"]],["zip",["inputiterator","outputiterator"]]]],[11,"len","","Number of channels",2,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the buffer is empty",2,[[["self"]],["bool"]]],[11,"get","","Access channel at the given index, unchecked",2,N],[11,"split_at","","Split borrowing at the given index, like for slices",2,N],[11,"len","","Number of channels",3,[[["self"]],["usize"]]],[11,"is_empty","","Returns true if the buffer is empty",3,[[["self"]],["bool"]]],[11,"get","","Access channel at the given index, unchecked",3,N],[11,"get_mut","","Mutably access channel at the given index, unchecked",3,N],[11,"split_at_mut","","Split borrowing at the given index, like for slices",3,N],[11,"new","","Creates a buffer for sending up to the given number of midi events per frame",4,[[["usize"]],["self"]]],[11,"send_events","","Sends events to the host. See the `fwd_midi` example.",4,[[["self"],["t"],["host"]]]],[11,"send_events_to_plugin","","Sends events from the host to a plugin.",4,[[["self"],["t"],["plugin"]]]],[0,"api","vst","Structures and types for interfacing with the VST 2.4 API.",N,N],[3,"AEffect","vst::api","Used with the VST API to pass around plugin information.",N,N],[12,"magic","","Magic number. Must be `['V', 'S', 'T', 'P']`.",5,N],[12,"dispatcher","","Host to plug-in dispatcher.",5,N],[12,"_process","","Accumulating process mode is deprecated in VST 2.4! Use `processReplacing` instead!",5,N],[12,"setParameter","","Set value of automatable parameter.",5,N],[12,"getParameter","","Get value of automatable parameter.",5,N],[12,"numPrograms","","Number of programs (Presets).",5,N],[12,"numParams","","Number of parameters. All programs are assumed to have this many parameters.",5,N],[12,"numInputs","","Number of audio inputs.",5,N],[12,"numOutputs","","Number of audio outputs.",5,N],[12,"flags","","Bitmask made of values from `api::PluginFlags`.",5,N],[12,"reserved1","","Reserved for host, must be 0.",5,N],[12,"reserved2","","Reserved for host, must be 0.",5,N],[12,"initialDelay","","For algorithms which need input in the first place (Group delay or latency in samples).",5,N],[12,"_realQualities","","Deprecated unused member.",5,N],[12,"_offQualities","","Deprecated unused member.",5,N],[12,"_ioRatio","","Deprecated unused member.",5,N],[12,"object","","Void pointer usable by api to store object data.",5,N],[12,"user","","User defined pointer.",5,N],[12,"uniqueId","","Registered unique identifier (register it at Steinberg 3rd party support Web). This is used to identify a plug-in during save+load of preset and project.",5,N],[12,"version","","Plug-in version (e.g. 1100 for v1.1.0.0).",5,N],[12,"processReplacing","","Process audio samples in replacing mode.",5,N],[12,"processReplacingF64","","Process double-precision audio samples in replacing mode.",5,N],[12,"future","","Reserved for future use (please zero).",5,N],[3,"ChannelProperties","","Information about a channel. Only some hosts use this information.",N,N],[12,"name","","Channel name.",6,N],[12,"flags","","Flags found in `ChannelFlags`.",6,N],[12,"arrangement_type","","Type of speaker arrangement this channel is a part of.",6,N],[12,"short_name","","Name of channel (recommended: 6 characters + delimiter).",6,N],[12,"future","","Reserved for future use.",6,N],[3,"FileType","","File type descriptor.",N,N],[12,"name","","Display name of file type.",7,N],[12,"osx_type","","OS X file type.",7,N],[12,"win_type","","Windows file type.",7,N],[12,"nix_type","","Unix file type.",7,N],[12,"mime_type_1","","MIME type.",7,N],[12,"mime_type_2","","Additional MIME type.",7,N],[3,"FileSelect","","File selector descriptor used in `host::OpCode::OpenFileSelector`.",N,N],[12,"command","","The type of file selection to perform.",8,N],[12,"select_type","","The file selector to open.",8,N],[12,"mac_creator","","Unknown. 0 = no creator.",8,N],[12,"num_types","","Number of file types.",8,N],[12,"file_types","","List of file types to show.",8,N],[12,"title","","File selector's title.",8,N],[12,"initial_path","","Initial path.",8,N],[12,"return_path","","Used when operation returns a single path.",8,N],[12,"size_return_path","","Size of the path buffer in bytes.",8,N],[12,"return_multiple_paths","","Used when operation returns multiple paths.",8,N],[12,"num_paths","","Number of paths returned.",8,N],[12,"reserved","","Reserved by host.",8,N],[12,"future","","Reserved for future use.",8,N],[3,"Events","","A struct which contains events.",N,N],[12,"num_events","","Number of events.",9,N],[12,"_reserved","","Reserved for future use. Should be 0.",9,N],[12,"events","","Variable-length array of pointers to `api::Event` objects.",9,N],[3,"EventIterator","","An iterator over events, returned by `api::Events::events`",N,N],[3,"Event","","A VST event intended to be casted to a corresponding type.",N,N],[12,"event_type","","The type of event. This lets you know which event this object should be casted to.",10,N],[12,"byte_size","","Size of this structure; `mem::sizeof::<Event>()`.",10,N],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",10,N],[12,"_flags","","Generic flags, none defined in VST api yet.",10,N],[12,"_reserved","","The `Event` type is cast appropriately, so this acts as reserved space.",10,N],[3,"MidiEvent","","A midi event.",N,N],[12,"event_type","","Should be `EventType::Midi`.",11,N],[12,"byte_size","","Size of this structure; `mem::sizeof::<MidiEvent>()`.",11,N],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",11,N],[12,"flags","","See `MidiEventFlags`.",11,N],[12,"note_length","","Length in sample frames of entire note if available, otherwise 0.",11,N],[12,"note_offset","","Offset in samples into note from start if available, otherwise 0.",11,N],[12,"midi_data","","1 to 3 midi bytes. TODO: Doc",11,N],[12,"_midi_reserved","","Reserved midi byte (0).",11,N],[12,"detune","","Detuning between -63 and +64 cents, for scales other than 'well-tempered'. e.g. 'microtuning'",11,N],[12,"note_off_velocity","","Note off velocity between 0 and 127.",11,N],[12,"_reserved1","","Reserved for future use. Should be 0.",11,N],[12,"_reserved2","","Reserved for future use. Should be 0.",11,N],[3,"SysExEvent","","A midi system exclusive event.",N,N],[12,"event_type","","Should be `EventType::SysEx`.",12,N],[12,"byte_size","","Size of this structure; `mem::sizeof::<SysExEvent>()`.",12,N],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",12,N],[12,"_flags","","Generic flags, none defined in VST api yet.",12,N],[12,"data_size","","Size of payload in bytes.",12,N],[12,"_reserved1","","Reserved for future use. Should be 0.",12,N],[12,"system_data","","Pointer to payload.",12,N],[12,"_reserved2","","Reserved for future use. Should be 0.",12,N],[3,"TimeInfo","","Describes the time at the start of the block currently being processed",N,N],[12,"sample_pos","","current Position in audio samples (always valid)",13,N],[12,"sample_rate","","current Sample Rate in Hertz (always valid)",13,N],[12,"nanoseconds","","System Time in nanoseconds (10^-9 second)",13,N],[12,"ppq_pos","","Musical Position, in Quarter Note (1.0 equals 1 Quarter Note)",13,N],[12,"tempo","","current Tempo in BPM (Beats Per Minute)",13,N],[12,"bar_start_pos","","last Bar Start Position, in Quarter Note",13,N],[12,"cycle_start_pos","","Cycle Start (left locator), in Quarter Note",13,N],[12,"cycle_end_pos","","Cycle End (right locator), in Quarter Note",13,N],[12,"time_sig_numerator","","Time Signature Numerator (e.g. 3 for 3/4)",13,N],[12,"time_sig_denominator","","Time Signature Denominator (e.g. 4 for 3/4)",13,N],[12,"smpte_offset","","SMPTE offset in SMPTE subframes (bits; 1/80 of a frame). The current SMPTE position can be calculated using `sample_pos`, `sample_rate`, and `smpte_frame_rate`.",13,N],[12,"smpte_frame_rate","","See `SmpteFrameRate`",13,N],[12,"samples_to_next_clock","","MIDI Clock Resolution (24 Per Quarter Note), can be negative (nearest clock)",13,N],[12,"flags","","See `TimeInfoFlags`",13,N],[3,"ChannelFlags","","Flags for VST channels.",N,N],[3,"PluginFlags","","Flags for VST plugins.",N,N],[3,"ModifierKey","","Cross platform modifier key flags.",N,N],[3,"MidiEventFlags","","MIDI event flags.",N,N],[3,"TimeInfoFlags","","Used in the `flags` field of `TimeInfo`, and for querying the host for specific values",N,N],[4,"SpeakerArrangementType","","Tells the host how the channels are intended to be used in the plugin. Only useful for some hosts.",N,N],[13,"Custom","","User defined arrangement.",14,N],[13,"Empty","","Empty arrangement.",14,N],[13,"Mono","","Mono.",14,N],[13,"Stereo","","L R",14,N],[13,"StereoSurround","","Ls Rs",14,N],[13,"StereoCenter","","Lc Rc",14,N],[13,"StereoSide","","Sl Sr",14,N],[13,"StereoCLfe","","C Lfe",14,N],[13,"Cinema30","","L R C",14,N],[13,"Music30","","L R S",14,N],[13,"Cinema31","","L R C Lfe",14,N],[13,"Music31","","L R Lfe S",14,N],[13,"Cinema40","","L R C S (LCRS)",14,N],[13,"Music40","","L R Ls Rs (Quadro)",14,N],[13,"Cinema41","","L R C Lfe S (LCRS + Lfe)",14,N],[13,"Music41","","L R Lfe Ls Rs (Quadro + Lfe)",14,N],[13,"Surround50","","L R C Ls Rs",14,N],[13,"Surround51","","L R C Lfe Ls Rs",14,N],[13,"Cinema60","","L R C Ls  Rs Cs",14,N],[13,"Music60","","L R Ls Rs  Sl Sr",14,N],[13,"Cinema61","","L R C Lfe Ls Rs Cs",14,N],[13,"Music61","","L R Lfe Ls Rs Sl Sr",14,N],[13,"Cinema70","","L R C Ls Rs Lc Rc",14,N],[13,"Music70","","L R C Ls Rs Sl Sr",14,N],[13,"Cinema71","","L R C Lfe Ls Rs Lc Rc",14,N],[13,"Music71","","L R C Lfe Ls Rs Sl Sr",14,N],[13,"Cinema80","","L R C Ls Rs Lc Rc Cs",14,N],[13,"Music80","","L R C Ls Rs Cs Sl Sr",14,N],[13,"Cinema81","","L R C Lfe Ls Rs Lc Rc Cs",14,N],[13,"Music81","","L R C Lfe Ls Rs Cs Sl Sr",14,N],[13,"Surround102","","L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2",14,N],[4,"Supported","","Used to specify whether functionality is supported.",N,N],[13,"Yes","","",15,N],[13,"Maybe","","",15,N],[13,"No","","",15,N],[4,"ProcessLevel","","Denotes in which thread the host is in.",N,N],[13,"Unknown","","Unsupported by host.",16,N],[13,"User","","GUI thread.",16,N],[13,"Realtime","","Audio process thread.",16,N],[13,"Prefetch","","Sequence thread (MIDI, etc).",16,N],[13,"Offline","","Offline processing thread (therefore GUI/user thread).",16,N],[4,"HostLanguage","","Language that the host is using.",N,N],[13,"English","","",17,N],[13,"German","","",17,N],[13,"French","","",17,N],[13,"Italian","","",17,N],[13,"Spanish","","",17,N],[13,"Japanese","","",17,N],[4,"FileSelectCommand","","The file operation to perform.",N,N],[13,"Load","","Load a file.",18,N],[13,"Save","","Save a file.",18,N],[13,"LoadMultipleFiles","","Load multiple files simultaneously.",18,N],[13,"SelectDirectory","","Choose a directory.",18,N],[4,"FileSelectType","","Format to select files.",N,N],[13,"Regular","","Regular file selector.",19,N],[4,"EventType","","The type of event that has occured. See `api::Event.event_type`.",N,N],[13,"Midi","","Midi event. See `api::MidiEvent`.",20,N],[13,"_Audio","","Deprecated.",20,N],[13,"_Video","","Deprecated.",20,N],[13,"_Parameter","","Deprecated.",20,N],[13,"_Trigger","","Deprecated.",20,N],[13,"SysEx","","System exclusive event. See `api::SysExEvent`.",20,N],[4,"SmpteFrameRate","","SMPTE Frame Rates.",N,N],[13,"Smpte24fps","","24 fps",21,N],[13,"Smpte25fps","","25 fps",21,N],[13,"Smpte2997fps","","29.97 fps",21,N],[13,"Smpte30fps","","30 fps",21,N],[13,"Smpte2997dfps","","29.97 drop",21,N],[13,"Smpte30dfps","","30 drop",21,N],[13,"SmpteFilm16mm","","Film 16mm",21,N],[13,"SmpteFilm35mm","","Film 35mm",21,N],[13,"Smpte239fps","","HDTV: 23.976 fps",21,N],[13,"Smpte249fps","","HDTV: 24.976 fps",21,N],[13,"Smpte599fps","","HDTV: 59.94 fps",21,N],[13,"Smpte60fps","","HDTV: 60 fps",21,N],[0,"consts","","Constant values",N,N],[17,"MAX_PRESET_NAME_LEN","vst::api::consts","",N,N],[17,"MAX_PARAM_STR_LEN","","",N,N],[17,"MAX_LABEL","","",N,N],[17,"MAX_SHORT_LABEL","","",N,N],[17,"MAX_PRODUCT_STR_LEN","","",N,N],[17,"MAX_VENDOR_STR_LEN","","",N,N],[17,"VST_MAGIC","","VST plugins are identified by a magic number. This corresponds to 0x56737450.",N,N],[6,"PluginMain","vst::api","`VSTPluginMain` function signature.",N,N],[6,"HostCallbackProc","","Host callback function passed to plugin. Can be used to query host information from plugin side.",N,N],[6,"DispatcherProc","","Dispatcher function used to process opcodes. Called by host.",N,N],[6,"ProcessProc","","Process function used to process 32 bit floating point samples. Called by host.",N,N],[6,"ProcessProcF64","","Process function used to process 64 bit floating point samples. Called by host.",N,N],[6,"SetParameterProc","","Callback function used to set parameter values. Called by host.",N,N],[6,"GetParameterProc","","Callback function used to get parameter values. Called by host.",N,N],[11,"get_plugin","","Return handle to Plugin object. Only works for plugins created using this library.",5,[[["self"]],["box"]]],[11,"drop_plugin","","Drop the Plugin object. Only works for plugins created using this library.",5,[[["self"]]]],[11,"from","","Create a `Supported` value from an integer if possible.",15,[[["isize"]],["option",["supported"]]]],[11,"events","","Use this in your impl of process_events() to process the incoming midi events.",9,[[["self"]],["eventiterator"]]],[18,"ACTIVE","","Indicates channel is active. Ignored by host.",22,N],[18,"STEREO","","Indicates channel is first of stereo pair.",22,N],[18,"SPEAKER","","Use channel's specified speaker_arrangement instead of stereo flag.",22,N],[11,"empty","","Returns an empty set of flags.",22,[[],["channelflags"]]],[11,"all","","Returns the set containing all flags.",22,[[],["channelflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",22,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",22,[[["i32"]],["option",["channelflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",22,[[["i32"]],["channelflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",22,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",22,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",22,[[["self"],["channelflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",22,[[["self"],["channelflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",22,[[["self"],["channelflags"]]]],[11,"remove","","Removes the specified flags in-place.",22,[[["self"],["channelflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",22,[[["self"],["channelflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",22,[[["self"],["channelflags"],["bool"]]]],[18,"HAS_EDITOR","","Plugin has an editor.",23,N],[18,"CAN_REPLACING","","Plugin can process 32 bit audio. (Mandatory in VST 2.4).",23,N],[18,"PROGRAM_CHUNKS","","Plugin preset data is handled in formatless chunks.",23,N],[18,"IS_SYNTH","","Plugin is a synth.",23,N],[18,"NO_SOUND_IN_STOP","","Plugin does not produce sound when all input is silence.",23,N],[18,"CAN_DOUBLE_REPLACING","","Supports 64 bit audio processing.",23,N],[11,"empty","","Returns an empty set of flags.",23,[[],["pluginflags"]]],[11,"all","","Returns the set containing all flags.",23,[[],["pluginflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",23,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",23,[[["i32"]],["option",["pluginflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",23,[[["i32"]],["pluginflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",23,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",23,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",23,[[["self"],["pluginflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",23,[[["self"],["pluginflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",23,[[["self"],["pluginflags"]]]],[11,"remove","","Removes the specified flags in-place.",23,[[["self"],["pluginflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",23,[[["self"],["pluginflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",23,[[["self"],["pluginflags"],["bool"]]]],[18,"SHIFT","","Shift key.",24,N],[18,"ALT","","Alt key.",24,N],[18,"COMMAND","","Control on mac.",24,N],[18,"CONTROL","","Command on mac, ctrl on other.",24,N],[11,"empty","","Returns an empty set of flags.",24,[[],["modifierkey"]]],[11,"all","","Returns the set containing all flags.",24,[[],["modifierkey"]]],[11,"bits","","Returns the raw value of the flags currently stored.",24,[[["self"]],["u8"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",24,[[["u8"]],["option",["modifierkey"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",24,[[["u8"]],["modifierkey"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",24,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",24,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",24,[[["self"],["modifierkey"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",24,[[["self"],["modifierkey"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",24,[[["self"],["modifierkey"]]]],[11,"remove","","Removes the specified flags in-place.",24,[[["self"],["modifierkey"]]]],[11,"toggle","","Toggles the specified flags in-place.",24,[[["self"],["modifierkey"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",24,[[["self"],["modifierkey"],["bool"]]]],[18,"REALTIME_EVENT","","This event is played live (not in playback from a sequencer track). This allows the plugin to handle these flagged events with higher priority, especially when the plugin has a big latency as per `plugin::Info::initial_delay`.",25,N],[11,"empty","","Returns an empty set of flags.",25,[[],["midieventflags"]]],[11,"all","","Returns the set containing all flags.",25,[[],["midieventflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",25,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",25,[[["i32"]],["option",["midieventflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",25,[[["i32"]],["midieventflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",25,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",25,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",25,[[["self"],["midieventflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",25,[[["self"],["midieventflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",25,[[["self"],["midieventflags"]]]],[11,"remove","","Removes the specified flags in-place.",25,[[["self"],["midieventflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",25,[[["self"],["midieventflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",25,[[["self"],["midieventflags"],["bool"]]]],[18,"TRANSPORT_CHANGED","","Indicates that play, cycle or record state has changed.",26,N],[18,"TRANSPORT_PLAYING","","Set if Host sequencer is currently playing.",26,N],[18,"TRANSPORT_CYCLE_ACTIVE","","Set if Host sequencer is in cycle mode.",26,N],[18,"TRANSPORT_RECORDING","","Set if Host sequencer is in record mode.",26,N],[18,"AUTOMATION_WRITING","","Set if automation write mode active (record parameter changes).",26,N],[18,"AUTOMATION_READING","","Set if automation read mode active (play parameter changes).",26,N],[18,"NANOSECONDS_VALID","","Set if TimeInfo::nanoseconds is valid.",26,N],[18,"PPQ_POS_VALID","","Set if TimeInfo::ppq_pos is valid.",26,N],[18,"TEMPO_VALID","","Set if TimeInfo::tempo is valid.",26,N],[18,"BARS_VALID","","Set if TimeInfo::bar_start_pos is valid.",26,N],[18,"CYCLE_POS_VALID","","Set if both TimeInfo::cycle_start_pos and VstTimeInfo::cycle_end_pos are valid.",26,N],[18,"TIME_SIG_VALID","","Set if both TimeInfo::time_sig_numerator and TimeInfo::time_sig_denominator are valid.",26,N],[18,"SMPTE_VALID","","Set if both TimeInfo::smpte_offset and VstTimeInfo::smpte_frame_rate are valid.",26,N],[18,"VST_CLOCK_VALID","","Set if TimeInfo::samples_to_next_clock is valid.",26,N],[11,"empty","","Returns an empty set of flags.",26,[[],["timeinfoflags"]]],[11,"all","","Returns the set containing all flags.",26,[[],["timeinfoflags"]]],[11,"bits","","Returns the raw value of the flags currently stored.",26,[[["self"]],["i32"]]],[11,"from_bits","","Convert from underlying bit representation, unless that representation contains bits that do not correspond to a flag.",26,[[["i32"]],["option",["timeinfoflags"]]]],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits that do not correspond to flags.",26,[[["i32"]],["timeinfoflags"]]],[11,"is_empty","","Returns `true` if no flags are currently stored.",26,[[["self"]],["bool"]]],[11,"is_all","","Returns `true` if all flags are currently set.",26,[[["self"]],["bool"]]],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"insert","","Inserts the specified flags in-place.",26,[[["self"],["timeinfoflags"]]]],[11,"remove","","Removes the specified flags in-place.",26,[[["self"],["timeinfoflags"]]]],[11,"toggle","","Toggles the specified flags in-place.",26,[[["self"],["timeinfoflags"]]]],[11,"set","","Inserts or removes the specified flags depending on the passed value.",26,[[["self"],["timeinfoflags"],["bool"]]]],[0,"editor","vst","All VST plugin editor related functionality.",N,N],[3,"KeyCode","vst::editor","A platform independent key code. Includes modifier keys.",N,N],[12,"character","","ASCII character for key pressed (if applicable).",27,N],[12,"key","","Key pressed. See `enums::Key`.",27,N],[12,"modifier","","Modifier key bitflags. See `enums::flags::modifier_key`.",27,N],[4,"KnobMode","","Allows host to set how a parameter knob works.",N,N],[13,"Circular","","",28,N],[13,"CircularRelative","","",28,N],[13,"Linear","","",28,N],[4,"Key","","Platform independent key codes.",N,N],[13,"Back","","",29,N],[13,"Tab","","",29,N],[13,"Clear","","",29,N],[13,"Return","","",29,N],[13,"Pause","","",29,N],[13,"Escape","","",29,N],[13,"Space","","",29,N],[13,"Next","","",29,N],[13,"End","","",29,N],[13,"Home","","",29,N],[13,"Left","","",29,N],[13,"Up","","",29,N],[13,"Right","","",29,N],[13,"Down","","",29,N],[13,"PageUp","","",29,N],[13,"PageDown","","",29,N],[13,"Select","","",29,N],[13,"Print","","",29,N],[13,"Enter","","",29,N],[13,"Snapshot","","",29,N],[13,"Insert","","",29,N],[13,"Delete","","",29,N],[13,"Help","","",29,N],[13,"Numpad0","","",29,N],[13,"Numpad1","","",29,N],[13,"Numpad2","","",29,N],[13,"Numpad3","","",29,N],[13,"Numpad4","","",29,N],[13,"Numpad5","","",29,N],[13,"Numpad6","","",29,N],[13,"Numpad7","","",29,N],[13,"Numpad8","","",29,N],[13,"Numpad9","","",29,N],[13,"Multiply","","",29,N],[13,"Add","","",29,N],[13,"Separator","","",29,N],[13,"Subtract","","",29,N],[13,"Decimal","","",29,N],[13,"Divide","","",29,N],[13,"F1","","",29,N],[13,"F2","","",29,N],[13,"F3","","",29,N],[13,"F4","","",29,N],[13,"F5","","",29,N],[13,"F6","","",29,N],[13,"F7","","",29,N],[13,"F8","","",29,N],[13,"F9","","",29,N],[13,"F10","","",29,N],[13,"F11","","",29,N],[13,"F12","","",29,N],[13,"Numlock","","",29,N],[13,"Scroll","","",29,N],[13,"Shift","","",29,N],[13,"Control","","",29,N],[13,"Alt","","",29,N],[13,"Equals","","",29,N],[8,"Editor","","Implemented by plugin editors.",N,N],[10,"size","","Get the size of the editor window.",30,N],[10,"position","","Get the coordinates of the editor window.",30,N],[11,"idle","","Editor idle call. Called by host.",30,[[["self"]]]],[11,"close","","Called when the editor window is closed.",30,[[["self"]]]],[10,"open","","Called when the editor window is opened. `window` is a platform dependent window pointer (e.g. `HWND` on Windows, `WindowRef` on OSX, `Window` on X11/Linux).",30,N],[10,"is_open","","Return whether the window is currently open.",30,[[["self"]],["bool"]]],[11,"set_knob_mode","","Set the knob mode for this editor (if supported by host).",30,[[["self"],["knobmode"]],["bool"]]],[11,"key_up","","Recieve key up event. Return true if the key was used.",30,[[["self"],["keycode"]],["bool"]]],[11,"key_down","","Receive key down event. Return true if the key was used.",30,[[["self"],["keycode"]],["bool"]]],[0,"channels","vst","Meta data for dealing with input / output channels. Not all hosts use this so it is not necessary for plugin functionality.",N,N],[3,"ChannelInfo","vst::channels","Information about an input / output channel. This isn't necessary for a channel to function but informs the host how the channel is meant to be used.",N,N],[4,"ArrangementTarget","","Target for Speaker arrangement type. Can be a cinema configuration or music configuration. Both are technically identical but this provides extra information to the host.",N,N],[13,"Music","","Music arrangement. Technically identical to Cinema.",31,N],[13,"Cinema","","Cinematic arrangement. Technically identical to Music.",31,N],[4,"StereoChannel","","An enum for all channels in a stereo configuration.",N,N],[13,"Left","","Left channel.",32,N],[13,"Right","","Right channel.",32,N],[4,"StereoConfig","","Possible stereo speaker configurations.",N,N],[13,"L_R","","Regular.",33,N],[13,"Ls_Rs","","Left surround, right surround.",33,N],[13,"Lc_Rc","","Left center, right center.",33,N],[13,"Sl_Sr","","Side left, side right.",33,N],[13,"C_Lfe","","Center, low frequency effects.",33,N],[4,"SurroundConfig","","Possible surround speaker configurations.",N,N],[13,"S3_0","","3.0 surround sound. Cinema: L R C Music: L R S",34,N],[13,"S3_1","","3.1 surround sound. Cinema: L R C Lfe Music: L R Lfe S",34,N],[13,"S4_0","","4.0 surround sound. Cinema: L R C S (LCRS) Music: L R Ls Rs (Quadro)",34,N],[13,"S4_1","","4.1 surround sound. Cinema: L R C Lfe S (LCRS + Lfe) Music: L R Ls Rs (Quadro + Lfe)",34,N],[13,"S5_0","","5.0 surround sound. Cinema and music: L R C Ls Rs",34,N],[13,"S5_1","","5.1 surround sound. Cinema and music: L R C Lfe Ls Rs",34,N],[13,"S6_0","","6.0 surround sound. Cinema: L R C Ls Rs Cs Music: L R Ls Rs Sl Sr",34,N],[13,"S6_1","","6.1 surround sound. Cinema: L R C Lfe Ls Rs Cs Music: L R Ls Rs Sl Sr",34,N],[13,"S7_0","","7.0 surround sound. Cinema: L R C Ls Rs Lc Rc Music: L R C Ls Rs Sl Sr",34,N],[13,"S7_1","","7.1 surround sound. Cinema: L R C Lfe Ls Rs Lc Rc Music: L R C Lfe Ls Rs Sl Sr",34,N],[13,"S8_0","","8.0 surround sound. Cinema: L R C Ls Rs Lc Rc Cs Music: L R C Ls Rs Cs Sl Sr",34,N],[13,"S8_1","","8.1 surround sound. Cinema: L R C Lfe Ls Rs Lc Rc Cs Music: L R C Lfe Ls Rs Cs Sl Sr",34,N],[13,"S10_2","","10.2 surround sound. Cinema + Music: L R C Lfe Ls Rs Tfl Tfc Tfr Trl Trr Lfe2",34,N],[4,"SpeakerArrangementType","","Type representing how a channel is used. Only useful for some hosts.",N,N],[13,"Custom","","Custom arrangement not specified to host.",35,N],[13,"Empty","","Empty arrangement.",35,N],[13,"Mono","","Mono channel.",35,N],[13,"Stereo","","Stereo channel. Contains type of stereo arrangement and speaker represented.",35,N],[13,"Surround","","Surround channel. Contains surround arrangement and target (cinema or music).",35,N],[11,"new","","Construct a new `ChannelInfo` object.",36,[[["string"],["option",["string"]],["bool"],["option",["speakerarrangementtype"]]],["channelinfo"]]],[11,"is_speaker_type","","Determine whether this channel is part of a surround speaker arrangement.",35,[[["self"]],["bool"]]],[11,"is_left_stereo","","Determine whether this channel is the left speaker in a stereo pair.",35,[[["self"]],["bool"]]],[0,"event","vst","Interfaces to VST events.",N,N],[3,"MidiEvent","vst::event","A midi event.",N,N],[12,"data","","The raw midi data associated with this event.",37,N],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",37,N],[12,"live","","This midi event was created live as opposed to being played back in the sequencer.",37,N],[12,"note_length","","The length of the midi note associated with this event, if available.",37,N],[12,"note_offset","","Offset in samples into note from note start, if available.",37,N],[12,"detune","","Detuning between -63 and +64 cents.",37,N],[12,"note_off_velocity","","Note off velocity between 0 and 127.",37,N],[3,"SysExEvent","","A system exclusive event.",N,N],[12,"payload","","The SysEx payload.",38,N],[12,"delta_frames","","Number of samples into the current processing block that this event occurs on.",38,N],[4,"Event","","A VST event.",N,N],[13,"Midi","","A midi event.",39,N],[13,"SysEx","","A system exclusive event.",39,N],[13,"Deprecated","","A deprecated event.",39,N],[0,"host","vst","Host specific structures.",N,N],[3,"PluginLoader","vst::host","Wrapper for an externally loaded VST plugin.",N,N],[3,"PluginInstance","","An instance of an externally loaded VST plugin.",N,N],[3,"HostBuffer","","Used for constructing `AudioBuffer` instances on the host.",N,N],[4,"PluginLoadError","","All possible errors that can occur when loading a VST plugin.",N,N],[13,"InvalidPath","","Could not load given path.",40,N],[13,"NotAPlugin","","Given path is not a VST plugin.",40,N],[13,"InstanceFailed","","Failed to create an instance of this plugin.",40,N],[13,"InvalidApiVersion","","The API version which the plugin used is not supported by this library.",40,N],[8,"Host","","Implemented by all VST hosts.",N,N],[11,"automate","","Automate a parameter; the value has been changed.",41,[[["self"],["i32"],["f32"]]]],[11,"get_plugin_id","","Get the plugin ID of the currently loading plugin.",41,[[["self"]],["i32"]]],[11,"idle","","An idle call.",41,[[["self"]]]],[11,"get_info","","Get vendor and product information.",41,N],[11,"process_events","","Handle incoming events from the plugin.",41,[[["self"],["events"]]]],[11,"get_time_info","","Get time information.",41,[[["self"],["i32"]],["option",["timeinfo"]]]],[11,"get_block_size","","Get block size.",41,[[["self"]],["isize"]]],[11,"load","","Load a plugin at the given path with the given host.",42,[[["path"],["arc",["mutex"]]],["result",["pluginloader","pluginloaderror"]]]],[11,"instance","","Try to create an instance of this VST plugin.",42,[[["self"]],["result",["plugininstance","pluginloaderror"]]]],[11,"new","","Create a `HostBuffer` for a given number of input and output channels.",43,[[["usize"],["usize"]],["hostbuffer"]]],[11,"from_info","","Create a `HostBuffer` for the number of input and output channels specified in an `Info` struct.",43,[[["info"]],["hostbuffer"]]],[11,"bind","","Bind sample arrays to the `HostBuffer` to create an `AudioBuffer` to pass to a plugin.",43,N],[11,"input_count","","Number of input channels supported by this `HostBuffer`.",43,[[["self"]],["usize"]]],[11,"output_count","","Number of output channels supported by this `HostBuffer`.",43,[[["self"]],["usize"]]],[0,"plugin","vst","Plugin specific structures.",N,N],[3,"Info","vst::plugin","A structure representing static plugin information.",N,N],[12,"name","","Plugin Name.",44,N],[12,"vendor","","Plugin Vendor.",44,N],[12,"presets","","Number of different presets.",44,N],[12,"parameters","","Number of parameters.",44,N],[12,"inputs","","Number of inputs.",44,N],[12,"outputs","","Number of outputs.",44,N],[12,"midi_inputs","","Number of MIDI input channels (1-16), or 0 for the default of 16 channels.",44,N],[12,"midi_outputs","","Number of MIDI output channels (1-16), or 0 for the default of 16 channels.",44,N],[12,"unique_id","","Unique plugin ID. Can be registered with Steinberg to prevent conflicts with other plugins.",44,N],[12,"version","","Plugin version (e.g. 0001 = `v0.0.0.1`, 1283 = `v1.2.8.3`).",44,N],[12,"category","","Plugin category. Possible values are found in `enums::PluginCategory`.",44,N],[12,"initial_delay","","Latency of the plugin in samples.",44,N],[12,"preset_chunks","","Indicates that preset data is handled in formatless chunks.",44,N],[12,"f64_precision","","Indicates whether this plugin can process f64 based `AudioBuffer` buffers.",44,N],[12,"silent_when_stopped","","If this is true, the plugin will not produce sound when the input is silence.",44,N],[3,"HostCallback","","A reference to the host which allows the plugin to call back and access information.",N,N],[4,"Category","","Plugin type. Generally either Effect or Synth.",N,N],[13,"Unknown","","Unknown / not implemented",45,N],[13,"Effect","","Any effect",45,N],[13,"Synth","","VST instrument",45,N],[13,"Analysis","","Scope, tuner, spectrum analyser, etc.",45,N],[13,"Mastering","","Dynamics, etc.",45,N],[13,"Spacializer","","Panners, etc.",45,N],[13,"RoomFx","","Delays and Reverbs",45,N],[13,"SurroundFx","","Dedicated surround processor.",45,N],[13,"Restoration","","Denoiser, etc.",45,N],[13,"OfflineProcess","","Offline processing.",45,N],[13,"Shell","","Contains other plugins.",45,N],[13,"Generator","","Tone generator, etc.",45,N],[4,"CanDo","","Features which are optionally supported by a plugin. These are queried by the host at run time.",N,N],[13,"SendEvents","","",46,N],[13,"SendMidiEvent","","",46,N],[13,"ReceiveEvents","","",46,N],[13,"ReceiveMidiEvent","","",46,N],[13,"ReceiveTimeInfo","","",46,N],[13,"Offline","","",46,N],[13,"MidiProgramNames","","",46,N],[13,"Bypass","","",46,N],[13,"ReceiveSysExEvent","","",46,N],[13,"MidiSingleNoteTuningChange","","",46,N],[13,"MidiKeyBasedInstrumentControl","","",46,N],[13,"Other","","",46,N],[8,"Plugin","","Must be implemented by all VST plugins.",N,N],[10,"get_info","","This method must return an `Info` struct.",47,[[["self"]],["info"]]],[11,"new","","Called during initialization to pass a `HostCallback` to the plugin.",47,[[["hostcallback"]],["self"]]],[11,"init","","Called when plugin is fully initialized.",47,[[["self"]]]],[11,"change_preset","","Set the current preset to the index specified by `preset`.",47,[[["self"],["i32"]]]],[11,"get_preset_num","","Get the current preset index.",47,[[["self"]],["i32"]]],[11,"set_preset_name","","Set the current preset name.",47,[[["self"],["string"]]]],[11,"get_preset_name","","Get the name of the preset at the index specified by `preset`.",47,[[["self"],["i32"]],["string"]]],[11,"get_parameter_label","","Get parameter label for parameter at `index` (e.g. \"db\", \"sec\", \"ms\", \"%\").",47,[[["self"],["i32"]],["string"]]],[11,"get_parameter_text","","Get the parameter value for parameter at `index` (e.g. \"1.0\", \"150\", \"Plate\", \"Off\").",47,[[["self"],["i32"]],["string"]]],[11,"get_parameter_name","","Get the name of parameter at `index`.",47,[[["self"],["i32"]],["string"]]],[11,"get_parameter","","Get the value of paramater at `index`. Should be value between 0.0 and 1.0.",47,[[["self"],["i32"]],["f32"]]],[11,"set_parameter","","Set the value of parameter at `index`. `value` is between 0.0 and 1.0.",47,[[["self"],["i32"],["f32"]]]],[11,"can_be_automated","","Return whether parameter at `index` can be automated.",47,[[["self"],["i32"]],["bool"]]],[11,"string_to_parameter","","Use String as input for parameter value. Used by host to provide an editable field to adjust a parameter value. E.g. \"100\" may be interpreted as 100hz for parameter. Returns if the input string was used.",47,[[["self"],["i32"],["string"]],["bool"]]],[11,"set_sample_rate","","Called when sample rate is changed by host.",47,[[["self"],["f32"]]]],[11,"set_block_size","","Called when block size is changed by host.",47,[[["self"],["i64"]]]],[11,"resume","","Called when plugin is turned on.",47,[[["self"]]]],[11,"suspend","","Called when plugin is turned off.",47,[[["self"]]]],[11,"vendor_specific","","Vendor specific handling.",47,N],[11,"can_do","","Return whether plugin supports specified action.",47,[[["self"],["cando"]],["supported"]]],[11,"get_tail_size","","Get the tail size of plugin when it is stopped. Used in offline processing as well.",47,[[["self"]],["isize"]]],[11,"process","","Process an audio buffer containing `f32` values.",47,[[["self"],["audiobuffer"]]]],[11,"process_f64","","Process an audio buffer containing `f64` values.",47,[[["self"],["audiobuffer"]]]],[11,"process_events","","Handle incoming events sent from the host.",47,[[["self"],["events"]]]],[11,"get_editor","","Return handle to plugin editor if supported.",47,[[["self"]],["option",["editor"]]]],[11,"get_preset_data","","If `preset_chunks` is set to true in plugin info, this should return the raw chunk data for the current preset.",47,[[["self"]],["vec",["u8"]]]],[11,"get_bank_data","","If `preset_chunks` is set to true in plugin info, this should return the raw chunk data for the current plugin bank.",47,[[["self"]],["vec",["u8"]]]],[11,"load_preset_data","","If `preset_chunks` is set to true in plugin info, this should load a preset from the given chunk data.",47,N],[11,"load_bank_data","","If `preset_chunks` is set to true in plugin info, this should load a preset bank from the given chunk data.",47,N],[11,"get_input_info","","Get information about an input channel. Only used by some hosts.",47,[[["self"],["i32"]],["channelinfo"]]],[11,"get_output_info","","Get information about an output channel. Only used by some hosts.",47,[[["self"],["i32"]],["channelinfo"]]],[11,"start_process","","Called one time before the start of process call. This indicates that the process call will be interrupted (due to Host reconfiguration or bypass state when the plug-in doesn't support softBypass).",47,[[["self"]]]],[11,"stop_process","","Called after the stop of process call.",47,[[["self"]]]],[11,"from_str","","Converts a string to a `CanDo` instance. Any given string that does not match the predefined values will return a `CanDo::Other` value.",46,[[["str"]],["cando"]]],[11,"vst_version","","Get the VST API version supported by the host e.g. `2400 = VST 2.4`.",48,[[["self"]],["i32"]]],[11,"raw_callback","","Get the callback for calling host-specific extensions",48,[[["self"]],["option",["hostcallbackproc"]]]],[11,"raw_effect","","Get the effect pointer for calling host-specific extensions",48,N],[14,"plugin_main","vst","Exports the necessary symbols for the plugin to be used by a VST host.",N,N],[11,"from","vst::buffer","",1,[[["t"]],["t"]]],[11,"into","","",1,[[["self"]],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"try_into","","",1,[[["self"]],["result"]]],[11,"get_type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[["self"]],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,N],[11,"into_iter","","",2,[[["self"]],["i"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"try_into","","",2,[[["self"]],["result"]]],[11,"get_type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",49,[[["t"]],["t"]]],[11,"into","","",49,[[["self"]],["u"]]],[11,"into_iter","","",49,[[["self"]],["i"]]],[11,"try_from","","",49,[[["u"]],["result"]]],[11,"borrow","","",49,[[["self"]],["t"]]],[11,"borrow_mut","","",49,[[["self"]],["t"]]],[11,"try_into","","",49,[[["self"]],["result"]]],[11,"get_type_id","","",49,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[["self"]],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,N],[11,"into_iter","","",3,[[["self"]],["i"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"try_into","","",3,[[["self"]],["result"]]],[11,"get_type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",50,[[["t"]],["t"]]],[11,"into","","",50,[[["self"]],["u"]]],[11,"into_iter","","",50,[[["self"]],["i"]]],[11,"try_from","","",50,[[["u"]],["result"]]],[11,"borrow","","",50,[[["self"]],["t"]]],[11,"borrow_mut","","",50,[[["self"]],["t"]]],[11,"try_into","","",50,[[["self"]],["result"]]],[11,"get_type_id","","",50,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[["self"]],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"try_into","","",4,[[["self"]],["result"]]],[11,"get_type_id","","",4,[[["self"]],["typeid"]]],[11,"from","vst::api","",5,[[["t"]],["t"]]],[11,"into","","",5,[[["self"]],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"try_into","","",5,[[["self"]],["result"]]],[11,"get_type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[["self"]],["u"]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"try_into","","",6,[[["self"]],["result"]]],[11,"get_type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[["self"]],["u"]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"try_into","","",7,[[["self"]],["result"]]],[11,"get_type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[["self"]],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"try_into","","",8,[[["self"]],["result"]]],[11,"get_type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[["self"]],["u"]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"try_into","","",9,[[["self"]],["result"]]],[11,"get_type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",51,[[["t"]],["t"]]],[11,"into","","",51,[[["self"]],["u"]]],[11,"into_iter","","",51,[[["self"]],["i"]]],[11,"try_from","","",51,[[["u"]],["result"]]],[11,"borrow","","",51,[[["self"]],["t"]]],[11,"borrow_mut","","",51,[[["self"]],["t"]]],[11,"try_into","","",51,[[["self"]],["result"]]],[11,"get_type_id","","",51,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[["self"]],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,N],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"try_into","","",10,[[["self"]],["result"]]],[11,"get_type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[["self"]],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"try_into","","",11,[[["self"]],["result"]]],[11,"get_type_id","","",11,[[["self"]],["typeid"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[["self"]],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,N],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"try_into","","",12,[[["self"]],["result"]]],[11,"get_type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[["self"]],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,N],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"try_into","","",13,[[["self"]],["result"]]],[11,"get_type_id","","",13,[[["self"]],["typeid"]]],[11,"from","","",22,[[["t"]],["t"]]],[11,"into","","",22,[[["self"]],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,N],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"try_into","","",22,[[["self"]],["result"]]],[11,"get_type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[["self"]],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,N],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"try_into","","",23,[[["self"]],["result"]]],[11,"get_type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[["self"]],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,N],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"try_into","","",24,[[["self"]],["result"]]],[11,"get_type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[["self"]],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,N],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"try_into","","",25,[[["self"]],["result"]]],[11,"get_type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[["self"]],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,N],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"try_into","","",26,[[["self"]],["result"]]],[11,"get_type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[["self"]],["u"]]],[11,"to_owned","","",14,[[["self"]],["t"]]],[11,"clone_into","","",14,N],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"try_into","","",14,[[["self"]],["result"]]],[11,"get_type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",15,[[["t"]],["t"]]],[11,"into","","",15,[[["self"]],["u"]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"try_into","","",15,[[["self"]],["result"]]],[11,"get_type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[["self"]],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"try_into","","",16,[[["self"]],["result"]]],[11,"get_type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[["self"]],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"try_into","","",17,[[["self"]],["result"]]],[11,"get_type_id","","",17,[[["self"]],["typeid"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[["self"]],["u"]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"try_into","","",18,[[["self"]],["result"]]],[11,"get_type_id","","",18,[[["self"]],["typeid"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[["self"]],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"try_into","","",19,[[["self"]],["result"]]],[11,"get_type_id","","",19,[[["self"]],["typeid"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[["self"]],["u"]]],[11,"to_owned","","",20,[[["self"]],["t"]]],[11,"clone_into","","",20,N],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"try_into","","",20,[[["self"]],["result"]]],[11,"get_type_id","","",20,[[["self"]],["typeid"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[["self"]],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,N],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"try_into","","",21,[[["self"]],["result"]]],[11,"get_type_id","","",21,[[["self"]],["typeid"]]],[11,"from","vst::editor","",27,[[["t"]],["t"]]],[11,"into","","",27,[[["self"]],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,N],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"try_into","","",27,[[["self"]],["result"]]],[11,"get_type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[["self"]],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,N],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"try_into","","",28,[[["self"]],["result"]]],[11,"get_type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[["self"]],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,N],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"try_into","","",29,[[["self"]],["result"]]],[11,"get_type_id","","",29,[[["self"]],["typeid"]]],[11,"from","vst::channels","",36,[[["t"]],["t"]]],[11,"into","","",36,[[["self"]],["u"]]],[11,"try_from","","",36,[[["u"]],["result"]]],[11,"borrow","","",36,[[["self"]],["t"]]],[11,"borrow_mut","","",36,[[["self"]],["t"]]],[11,"try_into","","",36,[[["self"]],["result"]]],[11,"get_type_id","","",36,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[["self"]],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"try_into","","",31,[[["self"]],["result"]]],[11,"get_type_id","","",31,[[["self"]],["typeid"]]],[11,"from","","",32,[[["t"]],["t"]]],[11,"into","","",32,[[["self"]],["u"]]],[11,"try_from","","",32,[[["u"]],["result"]]],[11,"borrow","","",32,[[["self"]],["t"]]],[11,"borrow_mut","","",32,[[["self"]],["t"]]],[11,"try_into","","",32,[[["self"]],["result"]]],[11,"get_type_id","","",32,[[["self"]],["typeid"]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[["self"]],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"try_into","","",33,[[["self"]],["result"]]],[11,"get_type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[["self"]],["u"]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"try_into","","",34,[[["self"]],["result"]]],[11,"get_type_id","","",34,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[["self"]],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"try_into","","",35,[[["self"]],["result"]]],[11,"get_type_id","","",35,[[["self"]],["typeid"]]],[11,"from","vst::event","",37,[[["t"]],["t"]]],[11,"into","","",37,[[["self"]],["u"]]],[11,"to_owned","","",37,[[["self"]],["t"]]],[11,"clone_into","","",37,N],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"try_into","","",37,[[["self"]],["result"]]],[11,"get_type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",38,[[["t"]],["t"]]],[11,"into","","",38,[[["self"]],["u"]]],[11,"to_owned","","",38,[[["self"]],["t"]]],[11,"clone_into","","",38,N],[11,"try_from","","",38,[[["u"]],["result"]]],[11,"borrow","","",38,[[["self"]],["t"]]],[11,"borrow_mut","","",38,[[["self"]],["t"]]],[11,"try_into","","",38,[[["self"]],["result"]]],[11,"get_type_id","","",38,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[["self"]],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,N],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"try_into","","",39,[[["self"]],["result"]]],[11,"get_type_id","","",39,[[["self"]],["typeid"]]],[11,"from","vst::host","",42,[[["t"]],["t"]]],[11,"into","","",42,[[["self"]],["u"]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"try_into","","",42,[[["self"]],["result"]]],[11,"get_type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",52,[[["t"]],["t"]]],[11,"into","","",52,[[["self"]],["u"]]],[11,"try_from","","",52,[[["u"]],["result"]]],[11,"borrow","","",52,[[["self"]],["t"]]],[11,"borrow_mut","","",52,[[["self"]],["t"]]],[11,"try_into","","",52,[[["self"]],["result"]]],[11,"get_type_id","","",52,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[["self"]],["u"]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"try_into","","",43,[[["self"]],["result"]]],[11,"get_type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",40,[[["t"]],["t"]]],[11,"into","","",40,[[["self"]],["u"]]],[11,"to_string","","",40,[[["self"]],["string"]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"try_into","","",40,[[["self"]],["result"]]],[11,"get_type_id","","",40,[[["self"]],["typeid"]]],[11,"from","vst::plugin","",44,[[["t"]],["t"]]],[11,"into","","",44,[[["self"]],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,N],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"try_into","","",44,[[["self"]],["result"]]],[11,"get_type_id","","",44,[[["self"]],["typeid"]]],[11,"from","","",48,[[["t"]],["t"]]],[11,"into","","",48,[[["self"]],["u"]]],[11,"to_owned","","",48,[[["self"]],["t"]]],[11,"clone_into","","",48,N],[11,"try_from","","",48,[[["u"]],["result"]]],[11,"borrow","","",48,[[["self"]],["t"]]],[11,"borrow_mut","","",48,[[["self"]],["t"]]],[11,"try_into","","",48,[[["self"]],["result"]]],[11,"get_type_id","","",48,[[["self"]],["typeid"]]],[11,"from","","",45,[[["t"]],["t"]]],[11,"into","","",45,[[["self"]],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,N],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"try_into","","",45,[[["self"]],["result"]]],[11,"get_type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",46,[[["t"]],["t"]]],[11,"into","","",46,[[["self"]],["u"]]],[11,"try_from","","",46,[[["u"]],["result"]]],[11,"borrow","","",46,[[["self"]],["t"]]],[11,"borrow_mut","","",46,[[["self"]],["t"]]],[11,"try_into","","",46,[[["self"]],["result"]]],[11,"get_type_id","","",46,[[["self"]],["typeid"]]],[11,"write_into","vst::event","",37,[[["self"],["placeholderevent"]]]],[11,"write_into","","",38,[[["self"],["placeholderevent"]]]],[11,"write_into","","",39,[[["self"],["placeholderevent"]]]],[11,"automate","vst::plugin","",48,[[["self"],["i32"],["f32"]]]],[11,"get_plugin_id","","",48,[[["self"]],["i32"]]],[11,"idle","","",48,[[["self"]]]],[11,"get_info","","",48,N],[11,"process_events","","Send events to the host.",48,[[["self"],["events"]]]],[11,"get_time_info","","Request time information from Host.",48,[[["self"],["i32"]],["option",["timeinfo"]]]],[11,"get_block_size","","Get block size.",48,[[["self"]],["isize"]]],[11,"get_info","vst::host","",52,[[["self"]],["info"]]],[11,"init","","",52,[[["self"]]]],[11,"change_preset","","",52,[[["self"],["i32"]]]],[11,"get_preset_num","","",52,[[["self"]],["i32"]]],[11,"set_preset_name","","",52,[[["self"],["string"]]]],[11,"get_preset_name","","",52,[[["self"],["i32"]],["string"]]],[11,"get_parameter_label","","",52,[[["self"],["i32"]],["string"]]],[11,"get_parameter_text","","",52,[[["self"],["i32"]],["string"]]],[11,"get_parameter_name","","",52,[[["self"],["i32"]],["string"]]],[11,"get_parameter","","",52,[[["self"],["i32"]],["f32"]]],[11,"set_parameter","","",52,[[["self"],["i32"],["f32"]]]],[11,"can_be_automated","","",52,[[["self"],["i32"]],["bool"]]],[11,"string_to_parameter","","",52,[[["self"],["i32"],["string"]],["bool"]]],[11,"set_sample_rate","","",52,[[["self"],["f32"]]]],[11,"set_block_size","","",52,[[["self"],["i64"]]]],[11,"resume","","",52,[[["self"]]]],[11,"suspend","","",52,[[["self"]]]],[11,"vendor_specific","","",52,N],[11,"can_do","","",52,[[["self"],["cando"]],["supported"]]],[11,"get_tail_size","","",52,[[["self"]],["isize"]]],[11,"process","","",52,[[["self"],["audiobuffer"]]]],[11,"process_f64","","",52,[[["self"],["audiobuffer"]]]],[11,"process_events","","",52,[[["self"],["events"]]]],[11,"get_preset_data","","",52,[[["self"]],["vec",["u8"]]]],[11,"get_bank_data","","",52,[[["self"]],["vec",["u8"]]]],[11,"load_preset_data","","",52,N],[11,"load_bank_data","","",52,N],[11,"get_input_info","","",52,[[["self"],["i32"]],["channelinfo"]]],[11,"get_output_info","","",52,[[["self"],["i32"]],["channelinfo"]]],[11,"clone","vst::buffer","",2,[[["self"]],["inputs"]]],[11,"clone","","",3,[[["self"]],["outputs"]]],[11,"clone","vst::api","",14,[[["self"]],["speakerarrangementtype"]]],[11,"clone","","",20,[[["self"]],["eventtype"]]],[11,"clone","","",10,[[["self"]],["event"]]],[11,"clone","","",12,[[["self"]],["sysexevent"]]],[11,"clone","","",13,[[["self"]],["timeinfo"]]],[11,"clone","","",21,[[["self"]],["smpteframerate"]]],[11,"clone","","",22,[[["self"]],["channelflags"]]],[11,"clone","","",23,[[["self"]],["pluginflags"]]],[11,"clone","","",24,[[["self"]],["modifierkey"]]],[11,"clone","","",25,[[["self"]],["midieventflags"]]],[11,"clone","","",26,[[["self"]],["timeinfoflags"]]],[11,"clone","vst::editor","",27,[[["self"]],["keycode"]]],[11,"clone","","",28,[[["self"]],["knobmode"]]],[11,"clone","","",29,[[["self"]],["key"]]],[11,"clone","vst::event","",39,[[["self"]],["event"]]],[11,"clone","","",37,[[["self"]],["midievent"]]],[11,"clone","","",38,[[["self"]],["sysexevent"]]],[11,"clone","vst::plugin","",45,[[["self"]],["category"]]],[11,"clone","","",44,[[["self"]],["info"]]],[11,"clone","","",48,[[["self"]],["hostcallback"]]],[11,"extend","vst::api","",22,[[["self"],["t"]]]],[11,"extend","","",23,[[["self"],["t"]]]],[11,"extend","","",24,[[["self"],["t"]]]],[11,"extend","","",25,[[["self"],["t"]]]],[11,"extend","","",26,[[["self"],["t"]]]],[11,"from","vst::editor","",28,[[["i8"]],["knobmode"]]],[11,"from","","",28,[[["i16"]],["knobmode"]]],[11,"from","","",28,[[["i32"]],["knobmode"]]],[11,"from","","",28,[[["i64"]],["knobmode"]]],[11,"from","","",28,[[["isize"]],["knobmode"]]],[11,"from","","",28,[[["u8"]],["knobmode"]]],[11,"from","","",28,[[["u16"]],["knobmode"]]],[11,"from","","",28,[[["u32"]],["knobmode"]]],[11,"from","","",28,[[["u64"]],["knobmode"]]],[11,"from","","",28,[[["usize"]],["knobmode"]]],[11,"from","","",29,[[["i8"]],["key"]]],[11,"from","","",29,[[["i16"]],["key"]]],[11,"from","","",29,[[["i32"]],["key"]]],[11,"from","","",29,[[["i64"]],["key"]]],[11,"from","","",29,[[["isize"]],["key"]]],[11,"from","","",29,[[["u8"]],["key"]]],[11,"from","","",29,[[["u16"]],["key"]]],[11,"from","","",29,[[["u32"]],["key"]]],[11,"from","","",29,[[["u64"]],["key"]]],[11,"from","","",29,[[["usize"]],["key"]]],[11,"from","vst::channels","",36,[[["channelproperties"]],["channelinfo"]]],[11,"from","","",35,[[["channelproperties"]],["speakerarrangementtype"]]],[11,"from","vst::event","",39,[[["event"]],["event"]]],[11,"from","vst::plugin","",45,[[["i8"]],["category"]]],[11,"from","","",45,[[["i16"]],["category"]]],[11,"from","","",45,[[["i32"]],["category"]]],[11,"from","","",45,[[["i64"]],["category"]]],[11,"from","","",45,[[["isize"]],["category"]]],[11,"from","","",45,[[["u8"]],["category"]]],[11,"from","","",45,[[["u16"]],["category"]]],[11,"from","","",45,[[["u32"]],["category"]]],[11,"from","","",45,[[["u64"]],["category"]]],[11,"from","","",45,[[["usize"]],["category"]]],[11,"drop","vst::host","",52,[[["self"]]]],[11,"into","vst::api","Convert to integer ordinal for interop with VST api.",15,[[["self"]],["isize"]]],[11,"into","vst::editor","",28,[[["self"]],["i8"]]],[11,"into","","",28,[[["self"]],["i16"]]],[11,"into","","",28,[[["self"]],["i32"]]],[11,"into","","",28,[[["self"]],["i64"]]],[11,"into","","",28,[[["self"]],["isize"]]],[11,"into","","",28,[[["self"]],["u8"]]],[11,"into","","",28,[[["self"]],["u16"]]],[11,"into","","",28,[[["self"]],["u32"]]],[11,"into","","",28,[[["self"]],["u64"]]],[11,"into","","",28,[[["self"]],["usize"]]],[11,"into","","",29,[[["self"]],["i8"]]],[11,"into","","",29,[[["self"]],["i16"]]],[11,"into","","",29,[[["self"]],["i32"]]],[11,"into","","",29,[[["self"]],["i64"]]],[11,"into","","",29,[[["self"]],["isize"]]],[11,"into","","",29,[[["self"]],["u8"]]],[11,"into","","",29,[[["self"]],["u16"]]],[11,"into","","",29,[[["self"]],["u32"]]],[11,"into","","",29,[[["self"]],["u64"]]],[11,"into","","",29,[[["self"]],["usize"]]],[11,"into","vst::channels","Convert to the VST api equivalent of this structure.",36,[[["self"]],["channelproperties"]]],[11,"into","","Convert to VST API arrangement type.",35,[[["self"]],["speakerarrangementtype"]]],[11,"into","vst::plugin","",45,[[["self"]],["i8"]]],[11,"into","","",45,[[["self"]],["i16"]]],[11,"into","","",45,[[["self"]],["i32"]]],[11,"into","","",45,[[["self"]],["i64"]]],[11,"into","","",45,[[["self"]],["isize"]]],[11,"into","","",45,[[["self"]],["u8"]]],[11,"into","","",45,[[["self"]],["u16"]]],[11,"into","","",45,[[["self"]],["u32"]]],[11,"into","","",45,[[["self"]],["u64"]]],[11,"into","","",45,[[["self"]],["usize"]]],[11,"into","","",46,[[["self"]],["string"]]],[11,"next","vst::buffer","",49,[[["self"]],["option"]]],[11,"next","","",50,[[["self"]],["option"]]],[11,"next","vst::api","",51,[[["self"]],["option"]]],[11,"partial_cmp","","",22,[[["self"],["channelflags"]],["option",["ordering"]]]],[11,"lt","","",22,[[["self"],["channelflags"]],["bool"]]],[11,"le","","",22,[[["self"],["channelflags"]],["bool"]]],[11,"gt","","",22,[[["self"],["channelflags"]],["bool"]]],[11,"ge","","",22,[[["self"],["channelflags"]],["bool"]]],[11,"partial_cmp","","",23,[[["self"],["pluginflags"]],["option",["ordering"]]]],[11,"lt","","",23,[[["self"],["pluginflags"]],["bool"]]],[11,"le","","",23,[[["self"],["pluginflags"]],["bool"]]],[11,"gt","","",23,[[["self"],["pluginflags"]],["bool"]]],[11,"ge","","",23,[[["self"],["pluginflags"]],["bool"]]],[11,"partial_cmp","","",24,[[["self"],["modifierkey"]],["option",["ordering"]]]],[11,"lt","","",24,[[["self"],["modifierkey"]],["bool"]]],[11,"le","","",24,[[["self"],["modifierkey"]],["bool"]]],[11,"gt","","",24,[[["self"],["modifierkey"]],["bool"]]],[11,"ge","","",24,[[["self"],["modifierkey"]],["bool"]]],[11,"partial_cmp","","",25,[[["self"],["midieventflags"]],["option",["ordering"]]]],[11,"lt","","",25,[[["self"],["midieventflags"]],["bool"]]],[11,"le","","",25,[[["self"],["midieventflags"]],["bool"]]],[11,"gt","","",25,[[["self"],["midieventflags"]],["bool"]]],[11,"ge","","",25,[[["self"],["midieventflags"]],["bool"]]],[11,"partial_cmp","","",26,[[["self"],["timeinfoflags"]],["option",["ordering"]]]],[11,"lt","","",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"le","","",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"gt","","",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"ge","","",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"default","vst::buffer","",4,[[],["self"]]],[11,"default","vst::api","",13,[[],["timeinfo"]]],[11,"default","","",21,[[],["self"]]],[11,"default","vst::channels","",35,[[],["speakerarrangementtype"]]],[11,"default","vst::plugin","",44,[[],["info"]]],[11,"default","","",48,[[],["hostcallback"]]],[11,"eq","vst::api","",22,[[["self"],["channelflags"]],["bool"]]],[11,"ne","","",22,[[["self"],["channelflags"]],["bool"]]],[11,"eq","","",23,[[["self"],["pluginflags"]],["bool"]]],[11,"ne","","",23,[[["self"],["pluginflags"]],["bool"]]],[11,"eq","","",24,[[["self"],["modifierkey"]],["bool"]]],[11,"ne","","",24,[[["self"],["modifierkey"]],["bool"]]],[11,"eq","","",25,[[["self"],["midieventflags"]],["bool"]]],[11,"ne","","",25,[[["self"],["midieventflags"]],["bool"]]],[11,"eq","","",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"ne","","",26,[[["self"],["timeinfoflags"]],["bool"]]],[11,"into_iter","vst::buffer","",2,N],[11,"into_iter","","",3,N],[11,"cmp","vst::api","",22,[[["self"],["channelflags"]],["ordering"]]],[11,"cmp","","",23,[[["self"],["pluginflags"]],["ordering"]]],[11,"cmp","","",24,[[["self"],["modifierkey"]],["ordering"]]],[11,"cmp","","",25,[[["self"],["midieventflags"]],["ordering"]]],[11,"cmp","","",26,[[["self"],["timeinfoflags"]],["ordering"]]],[11,"hash","","",22,N],[11,"hash","","",23,N],[11,"hash","","",24,N],[11,"hash","","",25,N],[11,"hash","","",26,N],[11,"fmt","vst::host","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","vst::api","",20,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","vst::editor","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","vst::host","",40,[[["self"],["formatter"]],["result"]]],[11,"fmt","vst::plugin","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",46,[[["self"],["formatter"]],["result"]]],[11,"sub","vst::api","Returns the set difference of the two sets of flags.",22,[[["self"],["channelflags"]],["channelflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",23,[[["self"],["pluginflags"]],["pluginflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",24,[[["self"],["modifierkey"]],["modifierkey"]]],[11,"sub","","Returns the set difference of the two sets of flags.",25,[[["self"],["midieventflags"]],["midieventflags"]]],[11,"sub","","Returns the set difference of the two sets of flags.",26,[[["self"],["timeinfoflags"]],["timeinfoflags"]]],[11,"sub_assign","","Disables all flags enabled in the set.",22,[[["self"],["channelflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",23,[[["self"],["pluginflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",24,[[["self"],["modifierkey"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",25,[[["self"],["midieventflags"]]]],[11,"sub_assign","","Disables all flags enabled in the set.",26,[[["self"],["timeinfoflags"]]]],[11,"not","","Returns the complement of this set of flags.",22,[[["self"]],["channelflags"]]],[11,"not","","Returns the complement of this set of flags.",23,[[["self"]],["pluginflags"]]],[11,"not","","Returns the complement of this set of flags.",24,[[["self"]],["modifierkey"]]],[11,"not","","Returns the complement of this set of flags.",25,[[["self"]],["midieventflags"]]],[11,"not","","Returns the complement of this set of flags.",26,[[["self"]],["timeinfoflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",22,[[["self"],["channelflags"]],["channelflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",23,[[["self"],["pluginflags"]],["pluginflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",24,[[["self"],["modifierkey"]],["modifierkey"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",25,[[["self"],["midieventflags"]],["midieventflags"]]],[11,"bitand","","Returns the intersection between the two sets of flags.",26,[[["self"],["timeinfoflags"]],["timeinfoflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",22,[[["self"],["channelflags"]],["channelflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",23,[[["self"],["pluginflags"]],["pluginflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",24,[[["self"],["modifierkey"]],["modifierkey"]]],[11,"bitor","","Returns the union of the two sets of flags.",25,[[["self"],["midieventflags"]],["midieventflags"]]],[11,"bitor","","Returns the union of the two sets of flags.",26,[[["self"],["timeinfoflags"]],["timeinfoflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",22,[[["self"],["channelflags"]],["channelflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",23,[[["self"],["pluginflags"]],["pluginflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",24,[[["self"],["modifierkey"]],["modifierkey"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",25,[[["self"],["midieventflags"]],["midieventflags"]]],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",26,[[["self"],["timeinfoflags"]],["timeinfoflags"]]],[11,"bitand_assign","","Disables all flags disabled in the set.",22,[[["self"],["channelflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",23,[[["self"],["pluginflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",24,[[["self"],["modifierkey"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",25,[[["self"],["midieventflags"]]]],[11,"bitand_assign","","Disables all flags disabled in the set.",26,[[["self"],["timeinfoflags"]]]],[11,"bitor_assign","","Adds the set of flags.",22,[[["self"],["channelflags"]]]],[11,"bitor_assign","","Adds the set of flags.",23,[[["self"],["pluginflags"]]]],[11,"bitor_assign","","Adds the set of flags.",24,[[["self"],["modifierkey"]]]],[11,"bitor_assign","","Adds the set of flags.",25,[[["self"],["midieventflags"]]]],[11,"bitor_assign","","Adds the set of flags.",26,[[["self"],["timeinfoflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",22,[[["self"],["channelflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",23,[[["self"],["pluginflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",24,[[["self"],["modifierkey"]]]],[11,"bitxor_assign","","Toggles the set of flags.",25,[[["self"],["midieventflags"]]]],[11,"bitxor_assign","","Toggles the set of flags.",26,[[["self"],["timeinfoflags"]]]],[11,"index","vst::buffer","",2,N],[11,"index","","",3,N],[11,"index_mut","","",3,N],[11,"from_iter","vst::api","",22,[[["t"]],["channelflags"]]],[11,"from_iter","","",23,[[["t"]],["pluginflags"]]],[11,"from_iter","","",24,[[["t"]],["modifierkey"]]],[11,"from_iter","","",25,[[["t"]],["midieventflags"]]],[11,"from_iter","","",26,[[["t"]],["timeinfoflags"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"description","vst::host","",40,[[["self"]],["str"]]]],"paths":[[8,"WriteIntoPlaceholder"],[3,"AudioBuffer"],[3,"Inputs"],[3,"Outputs"],[3,"SendEventBuffer"],[3,"AEffect"],[3,"ChannelProperties"],[3,"FileType"],[3,"FileSelect"],[3,"Events"],[3,"Event"],[3,"MidiEvent"],[3,"SysExEvent"],[3,"TimeInfo"],[4,"SpeakerArrangementType"],[4,"Supported"],[4,"ProcessLevel"],[4,"HostLanguage"],[4,"FileSelectCommand"],[4,"FileSelectType"],[4,"EventType"],[4,"SmpteFrameRate"],[3,"ChannelFlags"],[3,"PluginFlags"],[3,"ModifierKey"],[3,"MidiEventFlags"],[3,"TimeInfoFlags"],[3,"KeyCode"],[4,"KnobMode"],[4,"Key"],[8,"Editor"],[4,"ArrangementTarget"],[4,"StereoChannel"],[4,"StereoConfig"],[4,"SurroundConfig"],[4,"SpeakerArrangementType"],[3,"ChannelInfo"],[3,"MidiEvent"],[3,"SysExEvent"],[4,"Event"],[4,"PluginLoadError"],[8,"Host"],[3,"PluginLoader"],[3,"HostBuffer"],[3,"Info"],[4,"Category"],[4,"CanDo"],[8,"Plugin"],[3,"HostCallback"],[3,"InputIterator"],[3,"OutputIterator"],[3,"EventIterator"],[3,"PluginInstance"]]};
initSearch(searchIndex);
